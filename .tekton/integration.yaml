apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  name: sonar-integration
  annotations:
    pipelinesascode.tekton.dev/on-comment: "^((/test-all)|(/test-image))"
    pipelinesascode.tekton.dev/max-keep-runs: "3"
    pipelinesascode.tekton.dev/on-cel-expression: |-
      target_branch.matches("^(main|release-.*|alauda-.*)$") && !last_commit_title.contains("Auto-commit")
spec:
  taskRunSpecs:
  - pipelineTaskName: run-test
    computeResources:
      limits:
        cpu: "4"
        memory: 4Gi
  - pipelineTaskName: calculate-commit-sha
    podTemplate:
      securityContext:
        runAsUser: 65532
        runAsGroup: 65532
        fsGroup: 65532
        fsGroupChangePolicy: "OnRootMismatch"
  - pipelineTaskName: build-test-image
    podTemplate:
      securityContext:
        runAsUser: 65532
        runAsGroup: 65532
        fsGroup: 65532
        fsGroupChangePolicy: "OnRootMismatch"
  - pipelineTaskName: select-test-image
    podTemplate:
      securityContext:
        runAsUser: 65532
        runAsGroup: 65532
        fsGroup: 65532
        fsGroupChangePolicy: "OnRootMismatch"
  - pipelineTaskName: commit-test-image
    podTemplate:
      securityContext:
        runAsUser: 65532
        runAsGroup: 65532
        fsGroup: 65532
        fsGroupChangePolicy: "OnRootMismatch"
  pipelineRef:
    resolver: hub
    params:
      - name: catalog
        value: alauda
      - name: type
        value: tekton
      - name: kind
        value: pipeline
      - name: name
        value: vcluster-integration-test
      - name: version
        value: "0.2"

  params:
    - name: git-revision
      value:
        url: "{{ repo_url }}"
        branch: "{{ source_branch }}"
        commit: "{{ revision }}"
    - name: test
      value:
        command: |
          set -x
          export KUBECONFIG=$(workspaces.config.path)/vcluster-config
          kubectl config view

          trap 'chmod -R a+r allure-results/* && mkdir -p $(workspaces.source.path)/testing/allure-results && cp -r allure-results/* $(workspaces.source.path)/testing/allure-results/' EXIT
          echo "run integration tests..."
          export REPORT=allure
          export TAGS='@sonarqube-chart-deploy'
          make test
    - name: build-test-image # it is optional to build test image
      value:
        image-repository: build-harbor.alauda.cn/devops/sonarqube-ce-test
        dockerfile-path: testing/Dockerfile
    - name: commit-test-image # it is optional to commit test image to upstream repository
      value:
        upstream: |
          repo-url: https://github.com/AlaudaDevops/devops-artifact.git
          branch-name: main
          yaml-file-path: ./values.yaml
        upstream-branch-condition: "^(main|master|release-.*|alauda-.*)$"
        upstream-secret: github-credentials
    - name: vcluster
      value:
        custom-config: |
          sync:
            toHost:
              ingresses:
                enabled: true
            fromHost:
              storageClasses:
                enabled: true
              ingressClasses:
                enabled: true
    - name: report
      value:
        command: |
          cd $(workspaces.source.path)/testing
          allure generate --clean

          echo "Listing contents of report directory"
          ls -al
        path: testing/allure-report
  workspaces:
    - name: kube-config
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteMany
          resources:
            requests:
              storage: 50Mi
    - name: cache
      persistentVolumeClaim:
        claimName: build-cache
      subPath: golang
    - name: source
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteMany
          resources:
            requests:
              storage: 1Gi
    - name: upload-conf
      secret:
        secretName: upload-allure-report-conf
    - name: dockerconfig
      secret:
        secretName: build-harbor.kauto.docfj
    - name: basic-auth
      secret:
        secretName: github-credentials
    - name: gitversion-config
      configMap:
        name: gitversion-config

