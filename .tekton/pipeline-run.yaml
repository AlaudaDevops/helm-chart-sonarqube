apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: sonqube-test
  annotations:
    pipelinesascode.tekton.dev/on-cel-expression: |-
      target_branch.startsWith("alauda-*")
    pipelinesascode.tekton.dev/max-keep-runs: "5"
spec:
  taskRunSpecs:
    - pipelineTaskName: run-test
      stepOverrides:
        - name: script
          resources:
            limits:
              cpu: "4"
              memory: 4Gi
  pipelineRef:
    resolver: git
    params:
      - name: catalog
        value: alauda
      - name: type
        value: tekton
      - name: kind
        value: pipeline
      - name: name
        value: vcluster-integration-test
      - name: version
        value: "0.1"

  params:
    - name: git-revision
      value:
        url: "{{ repo_url }}"
        branch: "{{ source_branch }}"
        commit: "{{ revision }}"
    - name: test
      value:
        image: docker-mirrors.alauda.cn/library/golang:1.23.3-bookworm
        command: |
          set -x
          cd $(workspaces.source.path)/testing

          export PATH=$(pwd)/bin:$PATH
          export YQ_VERSION=4.25.2
          export KUBECTL_VERSION=1.28.2
          export HELM_VERSION=3.12.3

          # install dependencies
          mkdir bin
          if [ "$(arch)" = "arm64" ] || [ "$(arch)" = "aarch64" ]; then
            export ARCH="arm64"
          else
            export ARCH="amd64"
          fi
          mkdir -p tmp
          curl -sfL https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/yq_linux_${ARCH} -o ./bin/yq
          curl -sfL https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/${ARCH}/kubectl -o ./bin/kubectl
          curl -sfL https://get.helm.sh/helm-v${HELM_VERSION}-linux-${ARCH}.tar.gz | tar xzf - -C tmp 2>&1 && mv tmp/linux-${ARCH}/helm ./bin
          chmod +x ./bin/*
          yq --version
          kubectl version --client
          helm version

          export KUBECONFIG=$(workspaces.config.path)/vcluster-config
          kubectl config view

          export GOPROXY=https://build-nexus.alauda.cn/repository/golang/,direct
          export GOMAXPROCS=4

          echo "run integration tests..."
          export REPORT=allure
          make test-smoke
    - name: vcluster
      value:
        custom-config: |
          sync:
            toHost:
              ingresses:
                enabled: true
            fromHost:
              storageClasses:
                enabled: true
              ingressClasses:
                enabled: true
    - name: report
      value:
        command: |
          cd $(workspaces.source.path)/testing
          allure generate --clean

          echo "Listing contents of report directory"
          ls -al
        path: testing/allure-report
  workspaces:
    - name: kube-config
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteMany
          resources:
            requests:
              storage: 50Mi
    - name: cache
      persistentVolumeClaim:
        claimName: build-cache
      subPath: golang
    - name: source
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteMany
          resources:
            requests:
              storage: 1Gi
    - name: upload-conf
      secret:
        secretName: upload-allure-report-conf
