{{ $accountDeprecation := fromYaml (include "accountDeprecation" . ) }}
{{ $_ := set .Values "account" $accountDeprecation }}
{{- if .Values.account }}
{{- if or .Values.account.adminPasswordSecretName .Values.account.passwordSecretName }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "sonarqube.fullname" . }}-change-admin-password-hook
  labels: {{- include "sonarqube.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    {{- range $key, $value := .Values.adminJobAnnotations | default .Values.account.annotations }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
spec:
  activeDeadlineSeconds: 1800
  template:
    metadata:
      name: {{ template "sonarqube.fullname" . }}-change-admin-password-hook
      labels: {{- include "sonarqube.labels" . | nindent 8 }}
    spec:
      restartPolicy: OnFailure
      {{- if or .Values.image.pullSecrets .Values.image.pullSecret }}
      imagePullSecrets:
        {{- if .Values.image.pullSecret }}
        - name: {{ .Values.image.pullSecret }}
        {{- end }}
        {{- with .Values.image.pullSecrets }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- end }}
      serviceAccountName: {{ template "sonarqube.serviceAccountName" . }}
      {{- with .Values.tolerations }}
      tolerations: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity: {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: {{ template "sonarqube.fullname" . }}-change-default-admin-password
        image: {{ template "sonarqube.image" . }}
         {{- with (default (fromYaml (include "sonarqube.initContainerSecurityContext" .)) .Values.account.securityContext) }}
        securityContext: {{- toYaml . | nindent 10 }}
        {{- end }}
        command: ["/bin/bash", "-c"]
        args:
          - |
            #!/bin/bash
            set -u

            # define a function to echo message
            Echo() {
                # force flush stdout
                stdbuf --output=0 echo "[`date "+%F %T"`] $@" 1>&2;
                return
            }

            # define a function to encode string for url
            # tested characters: 'abcABC012 !"#$%&()*+,-./:;<=>?@[\]^_`{|}~'
            urlencode() {
              local data
              if [[ $# != 1 ]]; then
                  echo "Usage: $0 string-to-urlencode"
                  return 1
              fi
              data=$(curl -s -o /dev/null -w '%{url_effective}\n' -G http://localhost/ --data-urlencode "a=$1" | cut -c 21-)
              if [[ $? != 0 ]]; then
                  echo "Unexpected error" 1>&2
                  return 2
              fi
              echo "${data}"
              return 0
            }

            # set password env
            if [ -f /run/sonarqube/secret/ADMIN_PASSWORD ]; then
              export ADMIN_PASSWORD=$(cat /run/sonarqube/secret/ADMIN_PASSWORD)
              export ADMIN_PASSWORD_ENCODE=$(urlencode "${ADMIN_PASSWORD}")
            fi

            export CURRENT_ADMIN_PASSWORD="{{- .Values.account.currentAdminPassword }}"
            export CURRENT_ADMIN_PASSWORD_ENCODE=$(urlencode "${CURRENT_ADMIN_PASSWORD}")

            SONARQUBE_API="http://{{- template "sonarqube.fullname" . -}}:{{- default 9000 .Values.service.internalPort -}}{{- default "/" .Values.account.sonarWebContext -}}api"
            STATUS_API_URL="${SONARQUBE_API}/system/status"
            # Case 1: {"version":"9.9.5.90363","status":"DB_MIGRATION_NEEDED"}
            # Case 2: {"id":"0D7FCB3E-AY-gZuGYKQ4ce_7DseY5","version":"9.9.5.90363","status":"UP"}
            Echo "SONARQUBE_API: $SONARQUBE_API"

            # Avoid the previous instance has not been cleaned up, leading to the current instance is mistakenly thought to have started.
            # Sleep 60 seconds to wait cleanup.
            Echo "Sleep 60 seconds to wait cleanup"
            sleep 60;

            RETRY_COUNT=20
            SLEEP_INTERVAL=5

            # Wait for SonarQube to be ready
            ready="false"
            for i in {1..60}; do
              if curl -v -s --connect-timeout 10 $STATUS_API_URL | grep -w UP; then
                ready="true";
                break;
              fi
              Echo "Waiting for SonarQube to be ready...";
              sleep 5;
            done;

            if [ "$ready" = "false" ]; then
              Echo "SonarQube is not ready";
              exit 1;
            fi

            Echo "Start to change admin password"

            # Change admin password
            for i in $(seq 1 $RETRY_COUNT); do
              status=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 100 -u "admin:${CURRENT_ADMIN_PASSWORD}" -X POST "${SONARQUBE_API}/users/change_password?login=admin&previousPassword=${CURRENT_ADMIN_PASSWORD_ENCODE}&password=${ADMIN_PASSWORD_ENCODE}")
              if [ $status -eq 204 ]; then
                Echo "Change admin password successfully"
                exit 0
              fi
              if [ $status -eq 401 ]; then
                Echo "Default admin password has been changed before"
                exit 0
              fi
              if [ "$status" -ne "000" ]; then
                Echo "Change admin password failed. status: $status"
                break
              fi
              Echo "Retry to change admin password"
              sleep ${SLEEP_INTERVAL}
            done

            # Check the changed password
            for i in $(seq 1 $RETRY_COUNT); do
              status=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 100 -u "admin:${ADMIN_PASSWORD}" -X POST "${SONARQUBE_API}/users/change_password?login=admin&previousPassword=${ADMIN_PASSWORD_ENCODE}&password=${ADMIN_PASSWORD_ENCODE}")
              if [ $status -eq 400 ]; then
                Echo "Check the changed password successfully"
                exit 0
              fi
              if [ "$status" -ne "000" ]; then
                Echo "Check the changed password failed. status: $status"
                exit 1
              fi
              Echo "Retry to check the changed password"
              sleep ${SLEEP_INTERVAL}
            done

        volumeMounts:
          - name: admin-secret-volume
            mountPath: /run/sonarqube/secret
            readOnly: true
        {{- with (default .Values.resources .Values.account.resources) }}
        resources: {{- toYaml . | nindent 10 }}
        {{- end }}
      volumes:
        - name: admin-secret-volume
          projected:
            sources:
              - secret:
                  {{- if .Values.account.adminPasswordSecretName }}
                  name: {{ .Values.account.adminPasswordSecretName }}
                  {{- else }}
                  name: {{ .Values.account.passwordSecretName }}
                  {{- end }}
                  items:
                    - key: password
                      path: ADMIN_PASSWORD
{{- end }}
{{- end }}