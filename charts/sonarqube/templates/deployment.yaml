{{- if eq .Values.deploymentType "Deployment"}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "sonarqube.fullname" . }}
  labels:
    app: {{ template "sonarqube.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service }}
    app.kubernetes.io/name: {{ template "sonarqube.name" . }}-{{ template "sonarqube.fullname" . }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: sonarqube
    app.kubernetes.io/component: {{ template "sonarqube.fullname" . }}
    app.kubernetes.io/version: {{ tpl .Values.global.images.sonarqube.tag . | quote }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "sonarqube.name" . }}
      release: {{ .Release.Name | quote }}
{{- if .Values.deploymentStrategy }}
  strategy:
{{ toYaml .Values.deploymentStrategy | indent 4 }}
{{- end }}
  template:
    metadata:
      labels:
        app: {{ template "sonarqube.name" . }}
        release: {{ .Release.Name | quote }}
{{- with .Values.podLabels }}
{{ toYaml . | indent 8 }}
{{- end }}
      annotations:
        checksum/init-sysctl: {{ include (print $.Template.BasePath "/init-sysctl.yaml") . | sha256sum }}
        checksum/plugins: {{ include (print $.Template.BasePath "/install-plugins.yaml") . | sha256sum }}
        checksum/config: {{ include (print $.Template.BasePath "/config.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        sso: {{ .Values.oidc.enable | quote }}
        {{- if .Values.oidc.enable }}
        # If the server url changed, the pod should be restarted
        oidc/serverURL: {{ .Values.oidc.serverURL | quote }}
        {{- end }}
{{- if .Values.annotations}}
      {{- range $key, $value := .Values.annotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
{{- end }}
    spec:
    {{- if .Values.schedulerName }}
      schedulerName: {{ .Values.schedulerName }}
    {{- end }}
      serviceAccountName: {{ template "sonarqube.serviceAccountName" . }}
      securityContext:
{{ toYaml .Values.securityContext | indent 8 }}
      {{- if or .Values.image.pullSecrets .Values.image.pullSecret }}
      imagePullSecrets:
        {{- if .Values.image.pullSecret }}
        - name: {{ .Values.image.pullSecret }}
        {{- end }}
        {{- if .Values.image.pullSecrets}}
{{ toYaml .Values.image.pullSecrets | indent 8 }}
        {{- end }}
      {{- end }}
      initContainers:
      {{- if .Values.extraInitContainers }}
{{ toYaml .Values.extraInitContainers | indent 8 }}
      {{- end }}

      {{- if .Values.oidc.verifyCert }}
      {{- if ne .Values.oidc.sonarqube.tlsCrt "" }}
        - command:
            - sh
            - -c
            - |
              cp -f "${JAVA_HOME}/lib/security/cacerts" /tmp/scripts/cacerts;
              suffix=$(date +%s)-$(tr -dc 'a-zA-Z0-9' < /dev/urandom | head -c 8);
              keytool -import -v -trustcacerts -alias ipa-${suffix} -file /tmp/tls/tls -keystore \
              /tmp/scripts/cacerts -noprompt -storepass changeit;
              ls -artl /tmp/scripts/cacerts;
          image: "{{ template "sonarqube.image" . }}"
          imagePullPolicy: IfNotPresent
          name: tls
          resources:
{{ toYaml .Values.resources | indent 12 }}
          volumeMounts:
            - mountPath: /tmp/scripts/
              name: cacerts
            - mountPath: /tmp/tls
              name: tls
      {{- end }}
      {{- end }}

      {{- if .Values.caCerts.enabled }}
        - name: ca-certs
          image: {{ default "adoptopenjdk/openjdk11:alpine" .Values.caCerts.image }}
          imagePullPolicy: {{ .Values.image.pullPolicy  }}
          command: ["sh"]
          args: ["-c", "cp -f \"${JAVA_HOME}/lib/security/cacerts\" /tmp/certs/cacerts; if [ \"$(ls /tmp/secrets/ca-certs)\" ]; then for f in /tmp/secrets/ca-certs/*; do keytool -importcert -file \"${f}\" -alias \"$(basename \"${f}\")\" -keystore /tmp/certs/cacerts -storepass changeit -trustcacerts -noprompt; done; fi;"]
          {{- if $securityContext := .Values.initContainers.securityContext }}
          securityContext:
{{ toYaml $securityContext | indent 12 }}
          {{- end }}
          resources:
{{ toYaml .Values.initContainers.resources | indent 12 }}
          volumeMounts:
            - mountPath: /tmp/certs
              name: sonarqube
              subPath: certs
            - mountPath: /tmp/secrets/ca-certs
              name: ca-certs
          {{- with .Values.env }}
          env:
            {{- . | toYaml | trim | nindent 12 }}
          {{- end }}
      {{- end }}
      {{- if or .Values.initSysctl.enabled .Values.elasticsearch.configureNode }}
        - name: init-sysctl
          image: "{{ template "initSysctl.image" . }}"
          imagePullPolicy: {{ .Values.image.pullPolicy  }}
          {{- if $securityContext := (default .Values.initContainers.securityContext .Values.initSysctl.securityContext) }}
          securityContext:
{{ toYaml $securityContext | indent 12 }}
          {{- end }}
          resources:
{{ toYaml (default .Values.initContainers.resources .Values.initSysctl.resources) | indent 12 }}
          command: ["sh",
            "-e",
            "/tmp/scripts/init_sysctl.sh"]
          volumeMounts:
            - name: init-sysctl
              mountPath: /tmp/scripts/
          {{- with .Values.env }}
          env:
            {{- . | toYaml | trim | nindent 12 }}
          {{- end }}
      {{- end }}
      {{- if or (.Values.plugins.install) (.Values.plugins.useDefaultPluginsPackage) }}
        - name: install-plugins
          image: "{{ template "plugins.image" . }}"
          imagePullPolicy: {{ .Values.image.pullPolicy  }}
          {{- if .Values.plugins.useDefaultPluginsPackage }}
          command: ["sh",
            "-c",
            "mkdir -p /opt/sonarqube/extensions/plugins/tmp &&
            rm -f /opt/sonarqube/extensions/plugins/tmp/* &&
            cp /tmp/plugins/*.jar /opt/sonarqube/extensions/plugins/tmp && chmod 0777 -R /opt/sonarqube"
           ]
          {{- else }}
          command: ["sh",
            "-e",
            "/tmp/scripts/install_plugins.sh"]
          {{- end }}
          volumeMounts:
            - mountPath: {{ .Values.sonarqubeFolder }}/extensions/plugins
              name: sonarqube
              subPath: extensions/plugins
            - name: install-plugins
              mountPath: /tmp/scripts/
            {{- if .Values.plugins.netrcCreds }}
            - name: plugins-netrc-file
              mountPath: /root
            {{- end }}
          {{- if $securityContext := .Values.initContainers.securityContext }}
          securityContext:
{{ toYaml $securityContext | indent 12 }}
          {{- end }}
          resources:
{{ toYaml (default .Values.initContainers.resources .Values.plugins.resource) | indent 12 }}
          env:
            - name: http_proxy
              value: {{ default "" .Values.plugins.httpProxy }}
            - name: https_proxy
              value: {{ default "" .Values.plugins.httpsProxy }}
            - name: no_proxy
              value: {{ default "" .Values.plugins.noProxy }}
          {{- with .Values.env }}
            {{- . | toYaml | trim | nindent 12 }}
          {{- end }}
      {{- end }}
      {{- if or .Values.sonarProperties .Values.sonarSecretProperties .Values.sonarSecretKey .Values.oidc.enable (not .Values.elasticsearch.bootstrapChecks) }}
        - name: concat-properties
          image: "{{ template "wget.image" . }}"
          imagePullPolicy: {{ .Values.image.pullPolicy  }}
          command:
          - sh
          - -c
          - |
            #!/bin/sh
            if [ -f /tmp/props/sonar.properties ]; then
              cat /tmp/props/sonar.properties > /tmp/result/sonar.properties
            fi
            if [ -f /tmp/props/secret.properties ]; then
              cat /tmp/props/secret.properties > /tmp/result/sonar.properties
            fi
            if [ -f /tmp/props/sonar.properties -a -f /tmp/props/secret.properties ]; then
              awk 1 /tmp/props/sonar.properties /tmp/props/secret.properties > /tmp/result/sonar.properties
            fi
          volumeMounts:
          {{- if or .Values.sonarProperties .Values.sonarSecretKey .Values.oidc.enable (not .Values.elasticsearch.bootstrapChecks) }}
            - mountPath: /tmp/props/sonar.properties
              name: config
              subPath: sonar.properties
          {{- end }}
          {{- if .Values.sonarSecretProperties }}
            - mountPath: /tmp/props/secret.properties
              name: secret-config
              subPath: secret.properties
          {{- end }}
            - mountPath: /tmp/result
              name: concat-dir
          {{- if $securityContext := .Values.initContainers.securityContext }}
          securityContext:
{{ toYaml $securityContext | indent 12 }}
          {{- end }}
          resources:
{{ toYaml .Values.initContainers.resources | indent 12 }}
          {{- with .Values.env }}
          env:
            {{- . | toYaml | trim | nindent 12 }}
          {{- end }}
      {{- end }}
      {{- if .Values.postgresql.enabled }}
        - name: "wait-for-db"
          image: "{{ template "waitdb.image" . }}"
          imagePullPolicy: {{ .Values.image.pullPolicy  }}
          {{- if $securityContext := .Values.initContainers.securityContext }}
          securityContext:
{{ toYaml $securityContext | indent 12 }}
          {{- end }}
          resources:
{{ toYaml .Values.initContainers.resources | indent 12 }}
          # nc may be considered a security risk, so we use another way supported by bash.
          # command: ["/bin/sh", "-c", "for i in $(seq 1 200); do nc -z -w3 {{ .Release.Name}}-postgresql 5432 && exit 0 || sleep 2; done; exit 1"]
          command: ["/bin/bash", "-c", "for i in $(seq 1 200); do echo > /dev/tcp/{{- .Release.Name -}}-postgresql/5432 && exit 0 || sleep 2; done; exit 1"]
      {{- end }}

      {{- if and (.Values.persistence.host.nodeName) (.Values.persistence.host.path) }}
        # avoid hostpath volume permission issue
        - name: "change-permission"
          resources:
{{ toYaml .Values.resources | indent 12 }}
          image: "{{ template "initSysctl.image" . }}"
          imagePullPolicy: {{ default "" .Values.imagePullPolicy | quote }}
          command: [ "/bin/sh" ]
          args: [ "-c", "chown -R 1000:1000 {{ .Values.sonarqubeFolder }}" ]
          securityContext:
            runAsUser: 0
          volumeMounts:
            - mountPath: {{ .Values.sonarqubeFolder }}
              name: sonarqube
            {{- if .Values.sonarSecretKey }}
            - mountPath: {{ .Values.sonarqubeFolder }}/secret/
              name: secret
            {{- end }}
            - mountPath: {{ .Values.sonarqubeFolder }}/temp
              name: sonarqube
              subPath: temp
            - mountPath: {{ .Values.sonarqubeFolder }}/logs
              name: sonarqube
              subPath: logs
            - mountPath: {{ .Values.sonarqubeFolder }}/data
              name: sonarqube
              subPath: data
      {{- end  }}

      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
    {{- if or (.Values.nodeSelector) (.Values.persistence.host.nodeName) }}
      nodeSelector:
    {{- if .Values.nodeSelector }}
{{ toYaml .Values.nodeSelector | indent 8 }}
    {{- end }}
    {{- if .Values.persistence.host.nodeName }}
        kubernetes.io/hostname: {{ .Values.persistence.host.nodeName }}
    {{- end }}
    {{- end }}

    {{- if .Values.hostAliases }}
      hostAliases:
{{ toYaml .Values.hostAliases | indent 8 }}
    {{- end }}
    {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
    {{- end }}
    {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
    {{- end }}
      containers:
      {{- if .Values.extraContainers }}
        {{- toYaml .Values.extraContainers | nindent 8 }}
      {{- end }}
        - name: {{ .Chart.Name }}
          image: "{{ template "sonarqube.image" . }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.internalPort }}
              protocol: TCP
          {{- if or (.Values.plugins.install) (.Values.plugins.useDefaultPluginsPackage) }}
          command:
            - /tmp/scripts/copy_plugins.sh
          {{- end }}
          env:
            - name: SONAR_WEB_JAVAOPTS
              value: {{ template "sonarqube.jvmOpts" . }}
            - name: SONAR_CE_JAVAOPTS
              value: {{ template "sonarqube.jvmCEOpts" . }}
            - name: SONAR_WEB_SYSTEMPASSCODE
              value: "authless_liveness_access"
            {{- with .Values.env }}
            {{- . | toYaml | trim | nindent 12 }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ template "sonarqube.fullname" . }}-jdbc-config
{{- range .Values.extraConfig.secrets }}
            - secretRef:
                name: {{ . }}
{{- end }}
{{- range .Values.extraConfig.configmaps }}
            - configMapRef:
                name: {{ . }}
{{- end }}
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - |
                host="$(hostname -i || echo '127.0.0.1')"
                reply=$(wget -qO- --header="X-Sonar-Passcode: $SONAR_WEB_SYSTEMPASSCODE" http://${host}:{{ .Values.service.internalPort }}{{ .Values.livenessProbe.sonarWebContext }}api/system/liveness 2>&1)
                if [ -z "$reply" ]; then exit 0; else exit 1; fi
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.sonarWebContext }}api/system/status
              port: http
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- if .Values.containerSecurityContext }}
          securityContext:
{{- toYaml .Values.containerSecurityContext | nindent 12 }}
          {{- end }}
          volumeMounts:
{{- if .Values.persistence.mounts }}
{{ toYaml .Values.persistence.mounts | indent 12 }}
{{- end }}

            {{- if .Values.oidc.verifyCert }}
            {{- if ne .Values.oidc.sonarqube.tlsCrt "" }}
            # This path must be the jdk cacerts path, $JAVA_HOME/lib/security/cacerts
            # - mountPath: /usr/local/openjdk-11/lib/security/cacerts
            - mountPath: /opt/java/openjdk/lib/security/cacerts
              name: cacerts
              subPath: cacerts
            {{- end }}
            {{- end }}

            {{- if or .Values.sonarProperties .Values.sonarSecretProperties .Values.sonarSecretKey .Values.oidc.enable (not .Values.elasticsearch.bootstrapChecks) }}
            - mountPath: {{ .Values.sonarqubeFolder }}/conf/
              name: concat-dir
            {{- end }}
            {{- if .Values.sonarSecretKey }}
            - mountPath: {{ .Values.sonarqubeFolder }}/secret/
              name: secret
            {{- end }}
            {{- if .Values.caCerts }}
            - mountPath: {{ .Values.sonarqubeFolder }}/certs
              name: sonarqube
              subPath: certs
            {{- end }}
            - mountPath: {{ .Values.sonarqubeFolder }}/data
              name: sonarqube
              subPath: data
            {{- if .Values.persistence.enabled }}
            - mountPath: {{ .Values.sonarqubeFolder }}/extensions
              name: sonarqube
              subPath: extensions
            {{- else if or (.Values.plugins.install) (.Values.plugins.useDefaultPluginsPackage) }}
            - mountPath: {{ .Values.sonarqubeFolder }}/extensions/plugins
              name: sonarqube
              subPath: extensions/plugins
            {{- end }}
            - mountPath: {{ .Values.sonarqubeFolder }}/temp
              name: sonarqube
              subPath: temp
            - mountPath: {{ .Values.sonarqubeFolder }}/logs
              name: sonarqube
              subPath: logs
            - mountPath: /tmp
              name: tmp-dir
            - name: copy-plugins
              mountPath: /tmp/scripts
            - name: jdbc-secret-volume
              mountPath: /run/postgresql/secret
              readOnly: true
          resources:
{{ toYaml .Values.resources | indent 12 }}
      volumes:
{{- if .Values.persistence.volumes }}
{{ tpl (toYaml .Values.persistence.volumes | indent 6) . }}
{{- end }}
      {{- if or .Values.sonarProperties .Values.sonarSecretKey .Values.oidc.enable ( not .Values.elasticsearch.bootstrapChecks) }}
      - name: config
        configMap:
          name: {{ template "sonarqube.fullname" . }}-config
          items:
          - key: sonar.properties
            path: sonar.properties
      {{- end }}
      {{- if .Values.sonarSecretProperties }}
      - name: secret-config
        secret:
          secretName: {{ .Values.sonarSecretProperties }}
          items:
          - key: secret.properties
            path: secret.properties
      {{- end }}
      {{- if .Values.sonarSecretKey }}
      - name: secret
        secret:
          secretName: {{ .Values.sonarSecretKey }}
          items:
          - key: sonar-secret.txt
            path: sonar-secret.txt
      {{- end }}
      {{- if .Values.oidc.verifyCert }}
      {{- if ne .Values.oidc.sonarqube.tlsCrt "" }}
      - emptyDir: {}
        name: cacerts
      - name: tls
        secret:
          secretName: {{ .Values.oidc.sonarqube.tlsCrt }}
          items:
            - key: ca.crt
              path: tls
      {{- end }}
      {{- end }}
      {{- if .Values.caCerts }}
      - name: ca-certs
        secret:
          secretName: {{ .Values.caCerts.secret }}
      {{- end }}
      {{- if .Values.plugins.netrcCreds }}
      - name: plugins-netrc-file
        secret:
          secretName: {{ .Values.plugins.netrcCreds }}
          items:
          - key: netrc
            path: .netrc
      {{- end }}
      - name: init-sysctl
        configMap:
          name: {{ template "sonarqube.fullname" . }}-init-sysctl
          items:
            - key: init_sysctl.sh
              path: init_sysctl.sh
      - name: install-plugins
        configMap:
          name: {{ template "sonarqube.fullname" . }}-install-plugins
          items:
            - key: install_plugins.sh
              path: install_plugins.sh
      - name: sonarqube
        {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ if .Values.persistence.existingClaim }}{{ .Values.persistence.existingClaim }}{{- else }}{{ template "sonarqube.fullname" . }}{{- end }}
        {{- else if and (.Values.persistence.host.nodeName) (.Values.persistence.host.path) }}
        hostPath:
          path: {{ .Values.persistence.host.path }}
          type: DirectoryOrCreate
        {{- else }}
        emptyDir: {{- toYaml .Values.emptyDir | nindent 10 }}
        {{- end  }}
      - name : tmp-dir
        emptyDir: {{- toYaml .Values.emptyDir | nindent 10 }}
        {{- if or .Values.sonarProperties .Values.sonarSecretProperties .Values.sonarSecretKey ( not .Values.elasticsearch.bootstrapChecks) }}
      - name : concat-dir
        emptyDir: {{- toYaml .Values.emptyDir | nindent 10 -}}
        {{- end }}
      - name: copy-plugins
        configMap:
          name: {{ template "sonarqube.fullname" . }}-copy-plugins
          defaultMode: 0755
          items:
            - key: copy_plugins.sh
              path: copy_plugins.sh
      - name: jdbc-secret-volume
        projected:
          sources:
            - secret:
                name: {{ template "jdbc.secret" . }}
                items:
                  - key: {{ template "jdbc.secretPasswordKey" . }}
                    path: SONAR_JDBC_PASSWORD
{{- end }}
